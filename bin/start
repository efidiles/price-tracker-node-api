#!/usr/bin/env node
'use strict';

require('env2')('config.env');
let http = require('http');
let db = require('../storage/db');
let itemServiceConfig = require('../services/item-service');
let application = require('../index');

/**
 * Setup database
 */
db.connect(process.env.NODE_APP_MONGO_URL)
  .then(function() {
    console.info('Connected to the database.');

    setupLoggers();
    setupDIContainer();
    startApplication();
  })
  .catch(ex => {
    let message = "Can't connect to the database. Details: " + ex.stack;
    throw message;
  }
);

function setupDIContainer() {
  console.info('Injecting dependencies.');

  let redisClient = createRedisClient();
  let requestsLimiter = createRequestsLimiter();
  let emailSender = createEmailSender();

  itemServiceConfig({
    emailSender: {
      instance: emailSender,
      default: true
    }
  });

  application.injectDependencies({
    requestsLimiter,
    emailSender,
    redisClient
  });
}

function setupLoggers() {
  console.info('Setting up the logger');

  let logger = require('../decorators/logger');
  let Graylog = require('winston-graylog2');

  logger.add(Graylog, {
    name: 'Graylog',
    silent: false,
    handleExceptions: true,
    graylog: {
      servers: [{
        host: process.env.NODE_APP_LOGAPP_URL,
        port: process.env.NODE_APP_LOGAPP_PORT
      }],
      hostname: process.env.NODE_ENV,
      facility: 'NodeApp',
      bufferSize: 1400
    }
  });
}

function createRedisClient() {
  console.info('Setting up Redis.');

  let redis = require('redis');
  let redisDecorator = require('../storage/redis');

  let localRedis = redisDecorator(
    redis.createClient(
      process.env.NODE_APP_REDIS_PORT,
      process.env.NODE_APP_REDIS_HOST
      )
  );

  localRedis.on('error', function(err) {
    console.info("Can't connect to Redis. Details:  " + err);
  });

  return localRedis;
}

function createRequestsLimiter() {
  console.info('Setting up the requests limiter.');

  let limiterConfig = require('../facades/express-limiter');

  return limiterConfig({
    total: 50,
    expire: 1000 * 60 * 60,
    enabled: true
  });
}

function createEmailSender() {
  console.info('Setting up the email sender.');

  let emailSenderConfig = require('../facades/email-sender');
  return emailSenderConfig({
    service: 'Gmail',
    auth: {
      user: process.env.NODE_APP_EMAILSENDER_EMAIL,
      pass: process.env.NODE_APP_EMAILSENDER_PASSWORD
    }
  });
}

function startApplication() {
  console.info('Setting up the application');

  var expressInstance = application();
  let port = normalizePort(process.env.NODE_APP_PORT);
  expressInstance.set('port', port);

  let server = http.createServer(expressInstance);

  server.listen(port);
  server.on('error', onError);

  function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
      return val;
    }

    if (port >= 0) {
      return port;
    }

    return false;
  }

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    let bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }
}
